
user  root;
worker_processes  1;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

	gzip  on;

	resolver 202.96.134.133 202.96.128.68 202.96.154.8 202.96.154.15;

	lua_package_path '/root/workspace/lua/keepwork/?.lua;;';
	lua_code_cache off;
	init_by_lua_block {
		require("cjson");
		require("cjson.safe");
		require("luajwt");
		require("requests");
	}

	server {
		listen 80;
		server_name gitapi.wxaxiaoyao.cn:88;
		server_name gitapi.localhost;

		set $dst_uri "";
		location / {
			rewrite_by_lua_file /root/workspace/lua/keepwork/git_proxy.lua;
			proxy_pass $dst_uri;
			
		} 

		location ~ \.lua$ {
			deny all;
		}
		
		#location / {
			#proxy_pass http://127.0.0.1:8888; 
		#}
		#header_filter_by_lua_block {
			#ngx.header["Access-Control-Allow-Headers"] = headers["access-control-request-headers"] 
			#ngx.log(ngx.ERR, ngx.header["Access-Control-Allow-Headers"]);
			#local request_header = ngx.header["Access-Control-Allow-Headers"];
			#ngx.header["Access-Control-Allow-Headers"] = (request_header or "") .. "PROXY-TOKEN, proxy-url-prefix";
			#ngx.log(ngx.ERR, ngx.header["Access-Control-Allow-Headers"]);
		#}
	}
	
	server {
		listen 80;
		server_name wxaxiaoyao.cn:88;
		server_name localhost;
		
		#location /favicon\.ico {
			#root /root/workspace/lua/keepwork;
			#try_files $uri $uri/ =404;
		#}

		location ~ \.(js|html|css|ico|svg|png|jpg) {
			root /root/workspace/lua/keepwork;
			index index.html index.htm;
			try_files $uri $uri/ =404;
		}

		location / {
			proxy_pass http://127.0.0.1:8888;
		}
	}


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}
